from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import datetime
from datetime import date
from storage import Storage

storage = Storage()

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
ADD_EXPENSE_NAME, ADD_EXPENSE_AMOUNT, ADD_EXPENSE_DAY = range(3, 6)

async def start_add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä–µ–Ω–¥–∞, –ò–Ω—Ç–µ—Ä–Ω–µ—Ç):")
    return ADD_EXPENSE_NAME

async def add_expense_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞."""
    context.user_data['temp_expense'] = {'name': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return ADD_EXPENSE_AMOUNT

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞."""
    try:
        amount = float(update.message.text)
        context.user_data['temp_expense']['amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ (1-31):")
        return ADD_EXPENSE_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_EXPENSE_AMOUNT

async def add_expense_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–¥."""
    try:
        day = int(update.message.text)
        if day < 1 or day > 31:
            raise ValueError

        user_data = storage.get_user_data(str(update.effective_user.id))
        if 'regular_expenses' not in user_data:
            user_data['regular_expenses'] = []

        expense = context.user_data['temp_expense']
        expense['day'] = day
        user_data['regular_expenses'].append(expense)
        storage.update_user_data(str(update.effective_user.id), user_data)

        await update.message.reply_text(
            f"–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {expense['name']}\n"
            f"üí∞ –°—É–º–º–∞: {expense['amount']:,.2f} —Ä—É–±.\n"
            f"üìÖ –î–µ–Ω—å: {expense['day']}"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_EXPENSE_DAY


# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_BALANCE, ASK_SALARY_DAY = range(2)

async def calculate_daily_balance_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥–µ–Ω—å."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    income_data = user_data.get('income', {})
    
    if 'main_salary_day' in income_data:
        context.user_data["salary_day"] = income_data['main_salary_day']
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:")
        return ASK_BALANCE
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:")
        return ASK_BALANCE

async def ask_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        balance = float(update.message.text)
        context.user_data["balance"] = balance
        
        if "salary_day" in context.user_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã
            return await ask_salary_day(update, context, skip_input=True)
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –∫–æ–≥–¥–∞ —É –≤–∞—Å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã (–æ—Ç 1 –¥–æ 31):")
            return ASK_SALARY_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_BALANCE

async def ask_salary_day(update: Update, context: ContextTypes.DEFAULT_TYPE, skip_input=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    try:
        if skip_input:
            salary_day = context.user_data["salary_day"]
        else:
            salary_day = int(update.message.text)
            if salary_day < 1 or salary_day > 31:
                raise ValueError
            context.user_data["salary_day"] = salary_day

        balance = context.user_data["balance"]
        current_date = date.today()
        current_day = current_date.day
        current_month = current_date.month
        current_year = current_date.year

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
        if salary_day > current_day:
            next_salary_date = date(current_year, current_month, salary_day)
        else:
            next_month = current_month + 1 if current_month < 12 else 1
            next_year = current_year + 1 if next_month == 1 else current_year
            next_salary_date = date(next_year, next_month, salary_day)

        days_until_salary = (next_salary_date - current_date).days
        if days_until_salary <= 0:
            await update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return ASK_SALARY_DAY

        # –£—á–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        user_data = storage.get_user_data(str(update.effective_user.id))
        regular_expenses = user_data.get('regular_expenses', [])
        total_expenses = 0
        expenses_text = ""

        for expense in regular_expenses:
            expense_day = expense['day']
            if (expense_day >= current_day and expense_day <= salary_day) or \
               (salary_day < current_day and (expense_day >= current_day or expense_day <= salary_day)):
                total_expenses += expense['amount']
                expenses_text += f"üìå {expense['name']}: {expense['amount']:,.2f} —Ä—É–±. ({expense['day']} —á–∏—Å–ª–∞)\n"

        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å
        balance_after_expenses = balance - total_expenses
        daily_balance = balance_after_expenses / days_until_salary

        result = (
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.2f} —Ä—É–±.\n"
            f"üìä –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã:\n{expenses_text if expenses_text else '(–Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)'}\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {balance_after_expenses:,.2f} —Ä—É–±.\n"
            f"üìÖ –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å: {daily_balance:,.2f} —Ä—É–±.\n"
            f"‚è≥ –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã: {days_until_salary} –¥–Ω–µ–π"
        )

        await update.message.reply_text(result)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ASK_SALARY_DAY

async def view_regular_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    regular_expenses = user_data.get('regular_expenses', [])

    if not regular_expenses:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    result = "üìã –í–∞—à–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
    total = 0
    for expense in regular_expenses:
        result += (f"üìå {expense['name']}\n"
                  f"üí∞ –°—É–º–º–∞: {expense['amount']:,.2f} —Ä—É–±.\n"
                  f"üìÖ –î–µ–Ω—å: {expense['day']}\n\n")
        total += expense['amount']

    result += f"–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:,.2f} —Ä—É–±."
    await update.message.reply_text(result)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def daily_balance_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥–µ–Ω—å."""
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å$"), calculate_daily_balance_start),
        ],
        states={
            ASK_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_balance)],
            ASK_SALARY_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_salary_day)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)]  # –§allback –¥–ª—è –æ—Ç–º–µ–Ω—ã
    )
    return conv_handler
# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞–º–∏
INCOME_MENU, ADD_MAIN_INCOME, ADD_MAIN_INCOME_DAY, ADD_ADVANCE, ADD_ADVANCE_DAY, ADD_EXTRA_INCOME = range(6, 12)

async def manage_income_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞–º–∏."""
    keyboard = ReplyKeyboardMarkup([
        ["–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥"],
        ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥"],
        ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã"],
        ["–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥—ã"],
        ["–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)
    return INCOME_MENU

async def handle_income_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤."""
    choice = update.message.text
    
    if choice == "–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã:")
        return ADD_MAIN_INCOME
    
    elif choice == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞:")
        return ADD_EXTRA_INCOME
    
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã":
        user_data = storage.get_user_data(str(update.effective_user.id))
        income_data = user_data.get('income', {})
        
        if not income_data:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤")
        else:
            result = "üìã –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã:\n\n"
            if 'main_salary' in income_data:
                result += f"üí∞ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {income_data['main_salary']:,.2f} —Ä—É–±.\n"
                result += f"üìÖ –î–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã: {income_data.get('main_salary_day', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            if 'advance' in income_data:
                result += f"üí∞ –ê–≤–∞–Ω—Å: {income_data['advance']:,.2f} —Ä—É–±.\n"
                result += f"üìÖ –î–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã: {income_data.get('advance_day', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            if 'extra' in income_data:
                result += f"üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {income_data['extra']:,.2f} —Ä—É–±.\n"
            
            await update.message.reply_text(result)
        return INCOME_MENU
    
    elif choice == "–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥—ã":
        user_data = storage.get_user_data(str(update.effective_user.id))
        if 'income' in user_data:
            del user_data['income']
            storage.update_user_data(str(update.effective_user.id), user_data)
            await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö —É–¥–∞–ª–µ–Ω—ã")
        else:
            await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö")
        return INCOME_MENU
    elif choice == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")
        return INCOME_MENU

async def add_main_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    try:
        amount = float(update.message.text)
        context.user_data['temp_income'] = {'main_salary': amount}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã (1-31):")
        return ADD_MAIN_INCOME_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_MAIN_INCOME

async def add_main_income_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    try:
        day = int(update.message.text)
        if 1 <= day <= 31:
            context.user_data['temp_income']['main_salary_day'] = day
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∞–≤–∞–Ω—Å–∞ (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0):")
            return ADD_ADVANCE
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_MAIN_INCOME_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_MAIN_INCOME_DAY

async def add_advance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∞–≤–∞–Ω—Å–∞."""
    try:
        amount = float(update.message.text)
        context.user_data['temp_income']['advance'] = amount
        if amount > 0:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –∞–≤–∞–Ω—Å–∞ (1-31):")
            return ADD_ADVANCE_DAY
        else:
            await save_income(update, context)
            return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_ADVANCE

async def add_advance_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –∞–≤–∞–Ω—Å–∞."""
    try:
        day = int(update.message.text)
        if 1 <= day <= 31:
            context.user_data['temp_income']['advance_day'] = day
            await save_income(update, context)
            return ConversationHandler.END
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_ADVANCE_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_ADVANCE_DAY

async def add_extra_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥."""
    try:
        amount = float(update.message.text)
        user_data = storage.get_user_data(str(update.effective_user.id))
        if 'income' not in user_data:
            user_data['income'] = {}
        user_data['income']['extra'] = amount
        storage.update_user_data(str(update.effective_user.id), user_data)
        await update.message.reply_text(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ {amount:,.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return INCOME_MENU
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_EXTRA_INCOME

async def save_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö."""
    temp_income = context.user_data.get('temp_income', {})
    user_data = storage.get_user_data(str(update.effective_user.id))

    if 'income' not in user_data:
        user_data['income'] = {}

    user_data['income'].update({
        'main_salary': temp_income.get('main_salary', 0),
        'main_salary_day': temp_income.get('main_salary_day', 1),
        'advance': temp_income.get('advance', 0),
        'advance_day': temp_income.get('advance_day', 15) if temp_income.get('advance', 0) > 0 else None
    })

    storage.update_user_data(str(update.effective_user.id), user_data)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    return ConversationHandler.END

async def view_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    income_data = user_data.get('income', {})

    if not income_data:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö.")
        return

    result = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö:\n\n"

    if 'main_salary' in income_data:
        result += (
            f"üí∞ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {income_data['main_salary']:,.2f} —Ä—É–±.\n"
            f"üìÖ –î–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã: {income_data['main_salary_day']}\n"
        )

    if income_data.get('advance', 0) > 0:
        result += (
            f"\nüíµ –ê–≤–∞–Ω—Å: {income_data['advance']:,.2f} —Ä—É–±.\n"
            f"üìÖ –î–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã: {income_data['advance_day']}\n"
        )

    if 'extra' in income_data:
        result += f"\n‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {income_data['extra']:,.2f} —Ä—É–±.\n"

    total = (
        income_data.get('main_salary', 0) +
        income_data.get('advance', 0) +
        income_data.get('extra', 0)
    )
    result += f"\nüíé –û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {total:,.2f} —Ä—É–±."

    await update.message.reply_text(result)
async def get_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ—Ö–æ–¥–∞–º, —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –∫—Ä–µ–¥–∏—Ç–∞–º."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    current_date = datetime.date.today()
    next_month = current_date.replace(day=1) + datetime.timedelta(days=32)
    next_month = next_month.replace(day=1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö
    income_data = user_data.get('income', {})
    main_salary = income_data.get('main_salary', 0)
    main_salary_day = income_data.get('main_salary_day')
    advance = income_data.get('advance', 0)
    advance_day = income_data.get('advance_day')
    extra_income = income_data.get('extra', 0)
    total_income = main_salary + advance + extra_income

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
    regular_expenses = user_data.get('regular_expenses', [])
    total_regular_expenses = sum(expense['amount'] for expense in regular_expenses)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
    loans = user_data.get('loans', [])
    total_monthly_credit_payments = 0
    credit_info = ""
    for loan in loans:
        monthly_rate = loan['rate'] / 100 / 12
        monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])
        total_monthly_credit_payments += monthly_payment
        credit_info += f"- {loan['name']}: {monthly_payment:,.2f} —Ä—É–±. ({loan['payment_day']} —á–∏—Å–ª–∞)\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = "üìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    
    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    summary += f"üóì –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶ ({current_date.strftime('%B %Y')})\n"
    summary += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:,.2f} —Ä—É–±.\n"
    if main_salary:
        summary += f"- –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {main_salary:,.2f} —Ä—É–±. ({main_salary_day} —á–∏—Å–ª–∞)\n"
    if advance:
        summary += f"- –ê–≤–∞–Ω—Å: {advance:,.2f} —Ä—É–±. ({advance_day} —á–∏—Å–ª–∞)\n"
    if extra_income:
        summary += f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {extra_income:,.2f} —Ä—É–±.\n"
    
    summary += f"\nüìù –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_regular_expenses:,.2f} —Ä—É–±.\n"
    for expense in regular_expenses:
        summary += f"- {expense['name']}: {expense['amount']:,.2f} —Ä—É–±. ({expense['day']} —á–∏—Å–ª–∞)\n"

    if loans:
        summary += f"\nüí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {total_monthly_credit_payments:,.2f} —Ä—É–±.\n"
        summary += credit_info
    
    total_expenses = total_regular_expenses + total_monthly_credit_payments
    balance = total_income - total_expenses
    summary += f"\nüíµ –û—Å—Ç–∞—Ç–æ–∫: {balance:,.2f} —Ä—É–±.\n"

    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
    if main_salary_day or advance_day:
        next_income_date = None
        next_income_amount = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –¥–æ—Ö–æ–¥–∞
        if main_salary_day:
            main_salary_date = current_date.replace(day=main_salary_day)
            if main_salary_date <= current_date:
                main_salary_date = main_salary_date.replace(
                    month=main_salary_date.month + 1 if main_salary_date.month < 12 else 1,
                    year=main_salary_date.year + (1 if main_salary_date.month == 12 else 0)
                )
            if not next_income_date or main_salary_date < next_income_date:
                next_income_date = main_salary_date
                next_income_amount = main_salary

        if advance_day:
            advance_date = current_date.replace(day=advance_day)
            if advance_date <= current_date:
                advance_date = advance_date.replace(
                    month=advance_date.month + 1 if advance_date.month < 12 else 1,
                    year=advance_date.year + (1 if advance_date.month == 12 else 0)
                )
            if not next_income_date or advance_date < next_income_date:
                next_income_date = advance_date
                next_income_amount = advance

        if next_income_date:
            days_until_income = (next_income_date - current_date).days
            daily_balance = balance / days_until_income if days_until_income > 0 else 0
            summary += f"\nüí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å –¥–æ {next_income_date.strftime('%d.%m.%Y')}: {daily_balance:,.2f} —Ä—É–±.\n"

    # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    summary += f"\nüóì –°–õ–ï–î–£–Æ–©–ò–ô –ú–ï–°–Ø–¶ ({next_month.strftime('%B %Y')})\n"
    summary += f"üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {total_income:,.2f} —Ä—É–±.\n"
    summary += f"üìù –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_regular_expenses:,.2f} —Ä—É–±.\n"
    if loans:
        summary += f"üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {total_monthly_credit_payments:,.2f} —Ä—É–±.\n"
    summary += f"üíµ –û–∂–∏–¥–∞–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {balance:,.2f} —Ä—É–±.\n"

    await update.message.reply_text(summary)
