from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import datetime
from datetime import date

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
ADD_EXPENSE_NAME, ADD_EXPENSE_AMOUNT, ADD_EXPENSE_DAY = range(3, 6)

async def start_add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä–µ–Ω–¥–∞, –ò–Ω—Ç–µ—Ä–Ω–µ—Ç):")
    return ADD_EXPENSE_NAME

async def add_expense_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞."""
    context.user_data['temp_expense'] = {'name': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return ADD_EXPENSE_AMOUNT

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞."""
    try:
        amount = float(update.message.text)
        context.user_data['temp_expense']['amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ (1-31):")
        return ADD_EXPENSE_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_EXPENSE_AMOUNT

async def add_expense_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–¥."""
    try:
        day = int(update.message.text)
        if day < 1 or day > 31:
            raise ValueError
        
        user_data = storage.get_user_data(str(update.effective_user.id))
        if 'regular_expenses' not in user_data:
            user_data['regular_expenses'] = []
            
        expense = context.user_data['temp_expense']
        expense['day'] = day
        user_data['regular_expenses'].append(expense)
        storage.update_user_data(str(update.effective_user.id), user_data)
        
        await update.message.reply_text(
            f"–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {expense['name']}\n"
            f"üí∞ –°—É–º–º–∞: {expense['amount']:,.2f} —Ä—É–±.\n"
            f"üìÖ –î–µ–Ω—å: {expense['day']}"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ADD_EXPENSE_DAY


# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_BALANCE, ASK_SALARY_DAY = range(2)

async def calculate_daily_balance_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥–µ–Ω—å."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:")
    return ASK_BALANCE

async def ask_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        balance = float(update.message.text)
        context.user_data["balance"] = balance
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –∫–æ–≥–¥–∞ —É –≤–∞—Å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã (–æ—Ç 1 –¥–æ 31):")
        return ASK_SALARY_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_BALANCE

async def ask_salary_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    try:
        salary_day = int(update.message.text)
        if salary_day < 1 or salary_day > 31:
            raise ValueError
        context.user_data["salary_day"] = salary_day

        balance = context.user_data["balance"]
        current_date = date.today()
        current_day = current_date.day
        current_month = current_date.month
        current_year = current_date.year

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
        if salary_day > current_day:
            next_salary_date = date(current_year, current_month, salary_day)
        else:
            next_month = current_month + 1 if current_month < 12 else 1
            next_year = current_year + 1 if next_month == 1 else current_year
            next_salary_date = date(next_year, next_month, salary_day)

        days_until_salary = (next_salary_date - current_date).days
        if days_until_salary <= 0:
            await update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return ASK_SALARY_DAY

        # –£—á–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        user_data = storage.get_user_data(str(update.effective_user.id))
        regular_expenses = user_data.get('regular_expenses', [])
        total_expenses = 0
        expenses_text = ""

        for expense in regular_expenses:
            expense_day = expense['day']
            if (expense_day >= current_day and expense_day <= salary_day) or \
               (salary_day < current_day and (expense_day >= current_day or expense_day <= salary_day)):
                total_expenses += expense['amount']
                expenses_text += f"üìå {expense['name']}: {expense['amount']:,.2f} —Ä—É–±. ({expense['day']} —á–∏—Å–ª–∞)\n"

        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å
        balance_after_expenses = balance - total_expenses
        daily_balance = balance_after_expenses / days_until_salary
        
        result = (
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.2f} —Ä—É–±.\n"
            f"üìä –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã:\n{expenses_text if expenses_text else '(–Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)\n'}"
            f"üíµ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {balance_after_expenses:,.2f} —Ä—É–±.\n"
            f"üìÖ –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å: {daily_balance:,.2f} —Ä—É–±.\n"
            f"‚è≥ –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã: {days_until_salary} –¥–Ω–µ–π"
        )
        
        await update.message.reply_text(result)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return ASK_SALARY_DAY

def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def daily_balance_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥–µ–Ω—å."""
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å$"), calculate_daily_balance_start),
        ],
        states={
            ASK_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_balance)],
            ASK_SALARY_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_salary_day)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)]  # –§allback –¥–ª—è –æ—Ç–º–µ–Ω—ã
    )
    return conv_handler