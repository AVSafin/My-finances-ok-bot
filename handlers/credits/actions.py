from telegram import Update, ReplyKeyboardMarkup
from storage import Storage

storage = Storage()
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import datetime
import logging
from constants import (
    BANKS, 
    CATEGORIES, 
    CREDIT_MODIFICATION_MENU,
    CREDIT_PARAMETERS_MENU,
    CREDIT_REPAYMENT_MENU
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤
ASK_BANK, ASK_CATEGORY, ASK_AMOUNT, ASK_RATE, ASK_TERM, ASK_DAY, ASK_DATE = range(7)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def calculate_monthly_payment(loan_amount, interest_rate, loan_term):
    monthly_interest_rate = interest_rate / 100 / 12
    monthly_payment = (loan_amount * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -loan_term)
    return monthly_payment

async def delete_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    loans = user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    loan_list = "\n".join([f"{i + 1}. {loan['name']}" for i, loan in enumerate(loans)])
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{loan_list}")
    return 1  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞

async def confirm_delete_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        credit_index = int(update.message.text) - 1
        user_data = storage.get_user_data(str(update.effective_user.id))
        loans = user_data.get("loans", [])
        if credit_index < 0 or credit_index >= len(loans):
            raise ValueError
        deleted_loan = loans.pop(credit_index)
        context.user_data["loans"] = loans
        await update.message.reply_text(f"–ö—Ä–µ–¥–∏—Ç {deleted_loan['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞.")
        return 1  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    return ConversationHandler.END

async def payment_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    loans = user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
        return ConversationHandler.END

    current_date = datetime.date.today()
    upcoming_payments = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –¥–∞—Ç–∞–º

    for loan in loans:
        try:
            # –†–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            monthly_rate = loan['rate'] / 100 / 12
            monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç date, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(loan['date'], str):
                payment_date = datetime.datetime.strptime(loan['date'], '%Y-%m-%d').date()
            else:
                payment_date = loan['date']

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            payments = []
            for i in range(loan['term']):
                payments.append({
                    "date": payment_date,
                    "payment": monthly_payment,
                    "number": i + 1,
                })
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ 1 –º–µ—Å—è—Ü
                next_month = payment_date.month + 1
                next_year = payment_date.year
                if next_month > 12:
                    next_month = 1
                    next_year += 1
                payment_date = payment_date.replace(year=next_year, month=next_month)

            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            next_payments = [p for p in payments if p["date"] >= current_date]
            if next_payments:
                next_payment = next_payments[0]
                remaining_payments = len(next_payments)
                remaining_total = monthly_payment * remaining_payments
                remaining_principal = loan['amount'] * (remaining_payments / loan['term'])
                remaining_interest = remaining_total - remaining_principal

                payment_info = {
                    'name': loan['name'],
                    'payment': monthly_payment,
                    'remaining_payments': remaining_payments,
                    'remaining_principal': remaining_principal,
                    'remaining_interest': remaining_interest
                }

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –¥–∞—Ç–∞–º
                if next_payment["date"] in upcoming_payments:
                    upcoming_payments[next_payment["date"]].append(payment_info)
                else:
                    upcoming_payments[next_payment["date"]] = [payment_info]

        except KeyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞ {loan.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}: {str(e)}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    result = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º:\n\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    sorted_dates = sorted(upcoming_payments.keys())
    for payment_date in sorted_dates[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
        result += f"üóì {payment_date.strftime('%d.%m.%Y')}:\n"
        total_payment_for_date = 0

        for payment_info in upcoming_payments[payment_date]:
            total_payment_for_date += payment_info['payment']
            result += (
                f"‚Ä¢ {payment_info['name']}\n"
                f"  üí≥ –ü–ª–∞—Ç—ë–∂: {payment_info['payment']:,.2f} —Ä—É–±.\n"
                f"  üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–ª–∞—Ç–µ–∂–µ–π: {payment_info['remaining_payments']}\n"
                f"  üí∞ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {payment_info['remaining_principal']:,.2f} —Ä—É–±.\n"
                f"  üíπ –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {payment_info['remaining_interest']:,.2f} —Ä—É–±.\n"
            )

        result += f"üìå –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ {payment_date.strftime('%d.%m')}: {total_payment_for_date:,.2f} —Ä—É–±.\n\n"

    await update.message.reply_text(result)
    return ConversationHandler.END

async def view_credits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    loans = user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
    else:
        current_date = datetime.date.today()
        loan_list = []
        for i, loan in enumerate(loans):
            monthly_payment = calculate_monthly_payment(loan['amount'], loan['rate'], loan['term'])
            payment_date = datetime.datetime.strptime(str(loan['date']), '%Y-%m-%d').date() if isinstance(loan['date'], str) else loan['date']
            passed_months = sum(1 for m in range(loan['term']) if payment_date.replace(month=((payment_date.month-1+m)%12)+1, year=payment_date.year + (payment_date.month+m-1)//12) <= current_date)
            remaining_payments = max(0, loan['term'] - passed_months)
            remaining_total = monthly_payment * remaining_payments
            remaining_principal = loan['amount'] * (remaining_payments / loan['term'])
            remaining_interest = remaining_total - remaining_principal

            loan_info = (
                f"–ö—Ä–µ–¥–∏—Ç {i+1}:\n"
                f"{loan['name']}\n"
                f"üí∞ *–°—É–º–º–∞:* {format(loan['amount'], ',')} —Ä—É–±.\n"
                f"üìà *–°—Ç–∞–≤–∫–∞:* {loan['rate']}%\n"
                f"üïí *–°—Ä–æ–∫:* {loan['term']} –º–µ—Å—è—Ü–µ–≤\n"
                f"üìÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂:* {format(monthly_payment, ',.2f')} —Ä—É–±.\n"
                f"üìÜ *–î–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞:* {loan['payment_day']}\n"
                f"‚è≥ *–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:* {loan['date']}\n"
                f"üíµ *–û—Å—Ç–∞—Ç–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞:* {format(remaining_principal, ',.2f')} —Ä—É–±.\n"
                f"üíπ *–û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:* {format(remaining_interest, ',.2f')} —Ä—É–±."
            )
            loan_list.append(loan_info)
        loan_list = "\n\n".join(loan_list)
        await update.message.reply_text(
            f"–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:\n\n{loan_list}",
            parse_mode="Markdown"  # parse_mode –∑–¥–µ—Å—å
        )

async def start_add_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞."""
    keyboard = ReplyKeyboardMarkup(BANKS, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    return ASK_BANK

async def ask_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–∞."""
    context.user_data["bank"] = update.message.text
    logging.info(f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {context.user_data['bank']}")
    keyboard = ReplyKeyboardMarkup(CATEGORIES, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–∞:", reply_markup=keyboard)
    return ASK_CATEGORY

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞."""
    context.user_data["category"] = update.message.text
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É."""
    try:
        context.user_data["amount"] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.5):")
        return ASK_RATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_AMOUNT

async def ask_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        context.user_data["rate"] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:")
        return ASK_TERM
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_RATE

async def ask_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        context.user_data["term"] = int(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28):")
        return ASK_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return ASK_TERM

async def ask_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        day = int(update.message.text)
        if day < 1 or day > 28:
            raise ValueError
        context.user_data["payment_day"] = day
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        return ASK_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28:")
        return ASK_DAY

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        date_input = update.message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        payment_date = datetime.datetime.strptime(date_input, "%Y-%m-%d").date()
        context.user_data["date"] = payment_date

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
        credit_name = f"{context.user_data['category']} | {context.user_data['bank']} | {context.user_data['payment_day']} —á–∏—Å–ª–æ | {context.user_data['amount']:,} —Ä—É–±."

        # –í—ã—á–∏—Å–ª—è–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_payment = calculate_monthly_payment(context.user_data["amount"], context.user_data["rate"], context.user_data["term"])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
        credit = {
            "name": credit_name,
            "bank": context.user_data["bank"],
            "category": context.user_data["category"],
            "amount": context.user_data["amount"],
            "rate": context.user_data["rate"],
            "term": context.user_data["term"],
            "payment_day": context.user_data["payment_day"],
            "date": context.user_data["date"],
        }
        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        if "loans" not in user_data:
            user_data["loans"] = []
        user_data["loans"].append(credit)
        storage.save_user_data(user_id, user_data)

        await update.message.reply_text(
            "–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {credit['name']}\n"
            f"üè¶ *–ë–∞–Ω–∫:* {credit['bank']}\n"
            f"üí∞ *–°—É–º–º–∞:* {format(credit['amount'], ',')} —Ä—É–±.\n"
            f"üìà *–°—Ç–∞–≤–∫–∞:* {credit['rate']}%\n"
            f"üïí *–°—Ä–æ–∫:* {credit['term']} –º–µ—Å—è—Ü–µ–≤\n"
            f"üìÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:* {format(monthly_payment, ',.2f')} —Ä—É–±.\n"
            f"üìÜ *–î–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞:* {credit['payment_day']}\n"
            f"‚è≥ *–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:* {credit['date']}\n\n"
            f"üíµ *–û—Å—Ç–∞—Ç–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞:* {format(credit['amount'] * ((credit['term'] - len([p for p in range(credit['term']) if datetime.datetime.strptime(credit['date'], '%Y-%m-%d').date().replace(day=credit['payment_day']) + datetime.timedelta(days=30*p) <= datetime.date.today()])) / credit['term']), ',.2f')} —Ä—É–±.\n"
            f"üíπ *–û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:* {format(monthly_payment * (credit['term'] - len([p for p in range(credit['term']) if datetime.datetime.strptime(credit['date'], '%Y-%m-%d').date().replace(day=credit['payment_day']) + datetime.timedelta(days=30*p) <= datetime.date.today()])) - (credit['amount'] * ((credit['term'] - len([p for p in range(credit['term']) if datetime.datetime.strptime(credit['date'], '%Y-%m-%d').date().replace(day=credit['payment_day']) + datetime.timedelta(days=30*p) <= datetime.date.today()])) / credit['term'])), ',.2f')} —Ä—É–±.",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(CATEGORIES, resize_keyboard=True),
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return ASK_DATE
# States for credit modification
(CHOOSE_CREDIT, CHOOSE_ACTION, ASK_NEW_PAYMENT_DAY, ASK_CHANGE_DATE, ASK_REPAYMENT_AMOUNT, 
 CONFIRM_CHANGES, CHOOSE_PARAMETER, ASK_NEW_AMOUNT, ASK_NEW_RATE, ASK_NEW_TERM, 
 ASK_NEW_PAYMENT_AMOUNT, ASK_NEW_PAYMENT_DATE, ASK_NEW_BALANCE) = range(13)

async def modify_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Starts credit modification process."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    loans = user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return ConversationHandler.END

    # Create buttons for each credit
    credit_buttons = [[loan['name']] for loan in loans]
    credit_buttons.append(["–ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(credit_buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    return CHOOSE_CREDIT

async def handle_credit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles credit selection and shows modification options."""
    user_data = storage.get_user_data(str(update.effective_user.id))
    loans = user_data.get("loans", [])
    selected_name = update.message.text

    # Find the credit by name
    for index, loan in enumerate(loans):
        if loan['name'] == selected_name:
            context.user_data['selected_credit_index'] = index
            keyboard = ReplyKeyboardMarkup(CREDIT_MODIFICATION_MENU, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return CHOOSE_ACTION

    await update.message.reply_text("–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
    return CHOOSE_CREDIT

async def handle_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles modification action selection."""
    action = update.message.text
    if action == "–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ":
        keyboard = ReplyKeyboardMarkup(CREDIT_REPAYMENT_MENU, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:", reply_markup=keyboard)
        return ASK_REPAYMENT_AMOUNT
    elif action == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28):")
        return ASK_NEW_PAYMENT_DAY
    elif action == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
        keyboard = ReplyKeyboardMarkup(CREDIT_PARAMETERS_MENU, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
        return CHOOSE_PARAMETER
    else:
        return ConversationHandler.END

async def handle_parameter_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles parameter choice for modification."""
    choice = update.message.text
    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
        return ASK_NEW_AMOUNT
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É:")
        return ASK_NEW_RATE
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:")
        return ASK_NEW_TERM
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:")
        return ASK_NEW_PAYMENT_AMOUNT
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É:")
        return ASK_NEW_BALANCE
    else:
        return ConversationHandler.END

async def handle_new_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new loan amount input."""
    try:
        new_amount = float(update.message.text)
        if new_amount <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞")

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # Update loan amount
        loan['amount'] = new_amount

        # Recalculate monthly payment
        monthly_rate = loan['rate'] / 100 / 12
        monthly_payment = (new_amount * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–ù–æ–≤–∞—è —Å—É–º–º–∞: {new_amount:,.2f} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_AMOUNT

async def handle_new_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new loan term input."""
    try:
        new_term = int(update.message.text)
        if new_term <= 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫")

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # Update loan term
        loan['term'] = new_term

        # Recalculate monthly payment
        monthly_rate = loan['rate'] / 100 / 12
        monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -new_term)

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_term} –º–µ—Å—è—Ü–µ–≤\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_TERM

async def handle_new_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new interest rate input."""
    try:
        new_rate = float(update.message.text)
        if new_rate <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞")

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # Update loan rate
        loan['rate'] = new_rate

        # Recalculate monthly payment
        monthly_rate = new_rate / 100 / 12
        monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {new_rate:.2f}%\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_RATE

async def handle_new_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new loan balance input."""
    try:
        new_balance = float(update.message.text)
        if new_balance <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫")

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # Update loan balance
        loan['amount'] = new_balance

        # Recalculate monthly payment
        monthly_rate = loan['rate'] / 100 / 12
        monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_balance:,.2f} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_BALANCE

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        loan['amount'] = new_balance

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_rate = loan['rate'] / 100 / 12
        monthly_payment = (new_balance * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_balance:,.2f} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError as e:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_BALANCE

async def handle_new_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new payment amount input."""
    try:
        new_payment = float(update.message.text)
        context.user_data['new_payment'] = new_payment
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        return ASK_NEW_PAYMENT_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_NEW_PAYMENT_AMOUNT

async def handle_new_payment_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the date from which the new payment will be effective."""
    try:
        new_date = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        loan = user_data['loans'][credit_index]
        new_payment = context.user_data['new_payment']

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
        monthly_rate = loan['rate'] / 100 / 12
        remaining_months = loan['term']
        loan['amount'] = (new_payment * (1 - (1 + monthly_rate) ** -remaining_months)) / monthly_rate

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n"
            f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {new_payment:,.2f} —Ä—É–±.\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {new_date.strftime('%Y-%m-%d')}\n"
            f"–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan['amount']:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î:")
        return ASK_NEW_PAYMENT_DATE

async def handle_new_parameters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new credit parameters input."""
    try:
        params = update.message.text.split(',')
        if len(params) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        new_amount = float(params[0])
        new_rate = float(params[1])
        new_term = int(params[2])

        if new_amount <= 0 or new_rate <= 0 or new_term <= 0:
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")

        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
        loan['amount'] = new_amount
        loan['rate'] = new_rate
        loan['term'] = new_term

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_rate = new_rate / 100 / 12
        monthly_payment = (new_amount * monthly_rate) / (1 - (1 + monthly_rate) ** -new_term)

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"–°—É–º–º–∞: {new_amount:,.2f} —Ä—É–±.\n"
            f"–°—Ç–∞–≤–∫–∞: {new_rate}%\n"
            f"–°—Ä–æ–∫: {new_term} –º–µ—Å—è—Ü–µ–≤\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.2f} —Ä—É–±."
        )
        return ConversationHandler.END
    except ValueError as e:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–°—É–º–º–∞,–°—Ç–∞–≤–∫–∞,–°—Ä–æ–∫"
        )
        return ASK_NEW_PARAMETERS

async def handle_repayment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles early repayment amount input."""
    try:
        repayment_type = update.message.text
        if repayment_type in ["–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ä–æ–∫–∞", "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"]:
            context.user_data['repayment_type'] = repayment_type
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:")
            return CONFIRM_CHANGES
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
            return ASK_REPAYMENT_AMOUNT
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_REPAYMENT_AMOUNT

async def handle_new_payment_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles new payment day input."""
    try:
        newday = int(update.message.text)
        if new_day < 1 or new_day > 28:
            raise ValueError
        context.user_data['new_payment_day'] = new_day
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        return ASK_CHANGE_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28:")
        return ASK_NEW_PAYMENT_DAY

async def handle_change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the date from which the new payment day will be effective."""
    try:
        new_date = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']

        user_data['loans'][credit_index]['payment_day'] = context.user_data['new_payment_day']
        user_data['loans'][credit_index]['date'] = new_date

        storage.update_user_data(user_id, user_data)

        await update.message.reply_text(
            f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
            f"–ù–æ–≤—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞: {context.user_data['new_payment_day']}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {new_date.strftime('%Y-%m-%d')}"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î:")
        return ASK_CHANGE_DATE

async def handle_confirm_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirms and applies early repayment changes."""
    try:
        repayment_amount = float(update.message.text)
        user_id = str(update.effective_user.id)
        user_data = storage.get_user_data(user_id)
        credit_index = context.user_data['selected_credit_index']
        loan = user_data['loans'][credit_index]

        monthly_payment = calculate_monthly_payment(loan['amount'], loan['rate'], loan['term'])

        if context.user_data['repayment_type'] == "–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ä–æ–∫–∞":
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –ø—Ä–∏ —Ç–æ–º –∂–µ –ø–ª–∞—Ç–µ–∂–µ
            remaining_amount = loan['amount'] - repayment_amount
            new_term = int(remaining_amount * monthly_payment / (monthly_payment * loan['term']))
            loan['amount'] = remaining_amount
            loan['term'] = new_term
        else:  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            loan['amount'] -= repayment_amount

        user_data['loans'][credit_index] = loan
        storage.update_user_data(user_id, user_data)

        new_payment = calculate_monthly_payment(loan['amount'], loan['rate'], loan['term'])

        await update.message.reply_text(
            f"–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n"
            f"–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {repayment_amount:,.2f} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {new_payment:,.2f} —Ä—É–±.\n"
            f"–û—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫: {loan['term']} –º–µ—Å—è—Ü–µ–≤"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return CONFIRM_CHANGES