from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import datetime
from datetime import date
import logging
from telegraph import Telegraph
from constants import MAIN_MENU, CREDITS_MENU, SAVINGS_MENU, FORECAST_MENU, CREDIT_MODIFICATION_MENU, CREDIT_REPAYMENT_MENU, BANKS, CATEGORIES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from handlers.forecast.actions import calculate_daily_balance_start, ask_balance, ask_salary_day  # –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤
ASK_BANK, ASK_CATEGORY, ASK_AMOUNT, ASK_RATE, ASK_TERM, ASK_DAY, ASK_DATE = range(7)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def calculate_monthly_payment(loan_amount, interest_rate, loan_term):
    monthly_interest_rate = interest_rate / 100 / 12
    monthly_payment = (loan_amount * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -loan_term)
    return monthly_payment

async def delete_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç."""
    loans = context.user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    loan_list = "\n".join([f"{i + 1}. {loan['name']}" for i, loan in enumerate(loans)])
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{loan_list}")
    return 1  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞

async def confirm_delete_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        credit_index = int(update.message.text) - 1
        loans = context.user_data.get("loans", [])
        if credit_index < 0 or credit_index >= len(loans):
            raise ValueError
        deleted_loan = loans.pop(credit_index)
        context.user_data["loans"] = loans
        await update.message.reply_text(f"–ö—Ä–µ–¥–∏—Ç {deleted_loan['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞.")
        return 1  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    return ConversationHandler.END

async def payment_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º —Å –≤—ã–±–æ—Ä–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π."""
    loans = context.user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
        return

    current_date = datetime.date.today()
    schedules = []

    for loan in loans:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞
            if not all(key in loan for key in ['rate', 'amount', 'term', 'date']):
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞ {loan['name']}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂
            monthly_rate = loan['rate'] / 100 / 12
            monthly_payment = (loan['amount'] * monthly_rate) / (1 - (1 + monthly_rate) ** -loan['term'])
            payment_date = loan['date']

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            payments = []
            for i in range(loan['term']):
                payments.append({
                    "date": payment_date,
                    "payment": monthly_payment,
                    "number": i + 1,
                })
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ 1 –º–µ—Å—è—Ü
                next_month = payment_date.month + 1 if payment_date.month < 12 else 1
                next_year = payment_date.year + 1 if next_month == 1 else payment_date.year
                payment_date = payment_date.replace(year=next_year, month=next_month)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            selected_payments = (
                payments[:3] +  # –ü–µ—Ä–≤—ã–µ 3 –ø–ª–∞—Ç–µ–∂–∞
                [p for p in payments if p["date"] < current_date][-2:] +  # 2 –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                [p for p in payments if p["date"] == current_date][:1] +  # –¢–µ–∫—É—â–∏–π –ø–ª–∞—Ç—ë–∂
                [p for p in payments if p["date"] > current_date][:1] +  # –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂
                payments[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–ª–∞—Ç–µ–∂–∞
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            loan_schedule = f"–ö—Ä–µ–¥–∏—Ç: {loan['name']} ({loan['bank']} | {loan['category']}):\n"
            previous_date = None
            for p in selected_payments:
                if previous_date and (p["date"] - previous_date).days > 35:
                    loan_schedule += "...\n"  # –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –Ω–µ —Å–æ—Å–µ–¥–Ω–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏
                loan_schedule += (
                f"‚Ññ{p['number']} | üìÜ –î–∞—Ç–∞: {p['date']} | üí≥ –ü–ª–∞—Ç—ë–∂: {p['payment']:,.2f} —Ä—É–±.\n"                )
                previous_date = p["date"]

            schedules.append(loan_schedule)

        except KeyError:
            schedules.append(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞: {loan.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = "\n\n".join(schedules)
    await update.message.reply_text(f"–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n{result}")
    return ConversationHandler.END

async def view_credits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤."""
    loans = context.user_data.get("loans", [])
    if not loans:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
    else:
        loan_list = "\n\n".join(
            [f"–ö—Ä–µ–¥–∏—Ç {i+1}:\n"
             f"{loan['name']}\n"
             f"üí∞ *–°—É–º–º–∞:* {format(loan['amount'], ',')} —Ä—É–±.\n"
             f"üìà *–°—Ç–∞–≤–∫–∞:* {loan['rate']}%\n"
             f"üïí *–°—Ä–æ–∫:* {loan['term']} –º–µ—Å—è—Ü–µ–≤\n"
             f"üìÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂:* {format(calculate_monthly_payment(loan['amount'], loan['rate'], loan['term']), ',.2f')} —Ä—É–±.\n"
             f"üìÜ *–î–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞:* {loan['payment_day']}\n"
             f"‚è≥ *–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:* {loan['date']}"
             for i, loan in enumerate(loans)]
        )
        await update.message.reply_text(
            f"–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:\n\n{loan_list}",
            parse_mode="Markdown"  # parse_mode –∑–¥–µ—Å—å
        )
        
async def start_add_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞."""
    keyboard = ReplyKeyboardMarkup(BANKS, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    return ASK_BANK

async def ask_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–∞."""
    context.user_data["bank"] = update.message.text
    logging.info(f"–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {context.user_data['bank']}")
    keyboard = ReplyKeyboardMarkup(CATEGORIES, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–∞:", reply_markup=keyboard)
    return ASK_CATEGORY

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞."""
    context.user_data["category"] = update.message.text
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É."""
    try:
        context.user_data["amount"] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.5):")
        return ASK_RATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_AMOUNT

async def ask_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        context.user_data["rate"] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:")
        return ASK_TERM
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ASK_RATE

async def ask_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        context.user_data["term"] = int(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28):")
        return ASK_DAY
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return ASK_TERM

async def ask_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        day = int(update.message.text)
        if day < 1 or day > 28:
            raise ValueError
        context.user_data["payment_day"] = day
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        return ASK_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28:")
        return ASK_DAY

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞."""
    try:
        date_input = update.message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        payment_date = datetime.datetime.strptime(date_input, "%Y-%m-%d").date()
        context.user_data["date"] = payment_date

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
        credit_name = f"{context.user_data['category']} | {context.user_data['bank']} | {context.user_data['payment_day']} —á–∏—Å–ª–æ | {context.user_data['amount']:,} —Ä—É–±."

        # –í—ã—á–∏—Å–ª—è–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_payment = calculate_monthly_payment(context.user_data["amount"], context.user_data["rate"], context.user_data["term"])

        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
        credit = {
            "name": credit_name,
            "bank": context.user_data["bank"],
            "category": context.user_data["category"],
            "amount": context.user_data["amount"],
            "rate": context.user_data["rate"],
            "term": context.user_data["term"],
            "payment_day": context.user_data["payment_day"],
            "date": context.user_data["date"],
        }
        if "loans" not in context.user_data:
            context.user_data["loans"] = []
        context.user_data["loans"].append(credit)

        await update.message.reply_text(
            "–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {credit['name']}\n"
            f"üè¶ *–ë–∞–Ω–∫:* {credit['bank']}\n"
            f"üí∞ *–°—É–º–º–∞:* {format(credit['amount'], ',')} —Ä—É–±.\n"
            f"üìà *–°—Ç–∞–≤–∫–∞:* {credit['rate']}%\n"
            f"üïí *–°—Ä–æ–∫:* {credit['term']} –º–µ—Å—è—Ü–µ–≤\n"
            f"üìÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:* {format(monthly_payment, ',.2f')} —Ä—É–±.\n"
            f"üìÜ *–î–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞:* {credit['payment_day']}\n"
            f"‚è≥ *–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:* {credit['date']}",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(CREDITS_MENU, resize_keyboard=True),
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return ASK_DATE

